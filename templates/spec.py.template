# Autogenerated - do not edit
import datetime
import struct
import table


# Tables of method ids to decode functions
METHODS = {}


class Buffer(object):
    """A string that can be decoded sequentially."""
    __slots__ = 's', 'offset'

    def __init__(self, s):
        self.s = str
        self.offset = 0

    def read(self, fmt):
        out = struct.unpack_from(fmt, self.s, self.offset)
        self.offset += struct.calcsize(fmt)
        return out

    def read_string(self, fmt='!I'):
        size = self.read(fmt)
        return self.read_bytes(size)

    def read_bytes(self, bytes):
        out = self.s[self.offset:self.offset + bytes]
        self.offset += bytes
        return out

    def read_table(self):
        result, offset = table.decode(self.s, self.offset)
        self.offset = offset
        return result


class FrameMeta(type):
    def __new__(cls, main, bases, dict):
        t = type.__new__(cls, main, bases, dict)
        if 'method_id' in dict:
            METHODS[dict['method_id']] = t
        return t


class Frame(object):
    __metaclass__ = FrameMeta

    has_content = False
    is_error = False

    def __init__(self, *args):
        for k, v in zip(self.__slots__, args):
            setattr(self, k, v)


def encode_message(frame, headers, body, frame_size):
    """Encode message headers and body as a sequence of frames."""
    yield frame.encode()
    props, headers = split_headers(headers, BASIC_PROPS_SET)
    if headers:
        props['headers'] = headers
    yield encode_basic_properties(len(body), props)
    for chunk in encode_body(body, frame_size):
        yield chunk


def split_headers(user_headers, properties_set):
    """Split bitfield properties from named headers."""
    props = {}
    headers = {}
    for key, value in user_headers.iteritems():
        if key in properties_set:
            props[key] = value
        else:
            headers[key] = value
    return props, headers


def encode_body(body, frame_size):
    """Generate a sequence of chunks for body where each chunk is less than frame_size"""
    limit = frame_size - 7 - 1   # spec is broken...
    while body:
        payload, body = body[:limit], body[limit:]
        yield (0x03, payload)
